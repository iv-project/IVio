// SPDX-FileCopyrightText: 2006-2023, Knut Reinert & Freie Universität Berlin
// SPDX-FileCopyrightText: 2016-2023, Knut Reinert & MPI für molekulare Genetik
// SPDX-License-Identifier: BSD-3-Clause
#include <catch2/catch_all.hpp>
#include <filesystem>
#include <fstream>
#include <ivio/ivio.h>

TEST_CASE("reading bcf files", "[bcf][reader]") {
    auto tmp = std::filesystem::temp_directory_path() / "ivio_test";
    std::filesystem::create_directory(tmp);

    auto expected = std::vector<ivio::bcf::record> {
        ivio::bcf::record{.chromId = 0, .pos =   14369, .rlen = 1, .qual = 29.f, .n_info = 5, .n_allele = 2, .n_sample = 3, .n_fmt = 4, .id = "rs6054257", .ref = "G",   .alt = {23, 65},                     .filter = {17, 0}, .info = {17,  1, 17,  3, 17,  2, 17, 14, 17,  3, 21,  0, 0, 0, 63, 17,  5,  0, 17,  6,  0},                             .format = {17,  9, 33,  2,  3,  4,  3,  4,  4, 17, 10, 17, 48, 48, 43, 17,  2, 17,  1,  8,  5, 17, 11, 33, 51, 51, 51, 51, 128, 128}},
        ivio::bcf::record{.chromId = 0, .pos =   17329, .rlen = 1, .qual =  3.f, .n_info = 3, .n_allele = 2, .n_sample = 3, .n_fmt = 4, .id = "",          .ref = "T",   .alt = {23, 65},                     .filter = {17, 7}, .info = {17,  1, 17,  3, 17,  2, 17, 11, 17,  3, 21, 150, 67, 139, 60},                                                 .format = {17,  9, 33,  2,  3,  2,  5,  2,  2, 17, 10, 17, 49,  3, 41, 17,  2, 17,  3,  5,  3, 17, 11, 33, 58, 50, 65,  3, 128, 129}},
        ivio::bcf::record{.chromId = 0, .pos = 1110695, .rlen = 1, .qual = 67.f, .n_info = 5, .n_allele = 3, .n_sample = 3, .n_fmt = 4, .id = "rs6040355", .ref = "A",   .alt = {23, 71, 23, 84},             .filter = {17, 0}, .info = {17,  1, 17,  2, 17,  2, 17, 10, 17,  3, 37, 250, 126, 170, 62, 131, 192, 42, 63, 17,  4, 23,  84, 17,  5,  0}, .format = {17,  9, 33,  4,  7,  6,  5,  6,  6, 17, 10, 17, 21,  2, 35, 17,  2, 17,  6,  0,  4, 17, 11, 33, 23, 27, 18,  2, 128, 129}},
        ivio::bcf::record{.chromId = 0, .pos = 1230236, .rlen = 1, .qual = 47.f, .n_info = 3, .n_allele = 1, .n_sample = 3, .n_fmt = 4, .id = "",          .ref = "T",   .alt = {},                           .filter = {17, 0}, .info = {17,  1, 17,  3, 17,  2, 17, 13, 17,  4, 23, 84},                                                               .format = {17,  9, 33,  2,  3,  2,  3,  2,  2, 17, 10, 17, 54, 48, 61, 17,  2, 17,  7,  4,  2, 17, 11, 33, 56, 60, 51, 51, 128, 129}},
        ivio::bcf::record{.chromId = 0, .pos = 1234566, .rlen = 3, .qual = 50.f, .n_info = 3, .n_allele = 3, .n_sample = 3, .n_fmt = 3, .id = "microsat1", .ref = "GTC", .alt = {23, 71, 71, 71, 84, 67, 84}, .filter = {17, 0}, .info = {17,  1, 17,  3, 17,  2, 17,  9, 17,  4, 23, 71},                                                               .format = {17,  9, 33,  2,  4,  2,  6,  4,  4, 17, 10, 17, 35, 17, 40, 17,  2, 17,  4,  2,  3}},
    };

    auto expected_header = ivio::bcf::header {
        .table = {
            {R"(fileformat)", R"(VCFv4.3)"},
            {R"(FILTER)", R"(<ID=PASS,Description="All filters passed",IDX=0>)"},
            {R"(fileDate)", R"(20090805)"},
            {R"(source)", R"(myImputationProgramV3.1)"},
            {R"(reference)", R"(file:///seq/references/1000GenomesPilot-NCBI36.fasta)"},
            {R"(contig)", R"(<ID=20,length=62435964,assembly=B36,md5=f126cdf8a6e0c7f379d618ff66beb2da,species="Homo sapiens",taxonomy=x,IDX=0>)"},
            {R"(phasing)", R"(partial)"},
            {R"(INFO)", R"(<ID=NS,Number=1,Type=Integer,Description="Number of Samples With Data",IDX=1>)"},
            {R"(INFO)", R"(<ID=DP,Number=1,Type=Integer,Description="Total Depth",IDX=2>)"},
            {R"(INFO)", R"(<ID=AF,Number=A,Type=Float,Description="Allele Frequency",IDX=3>)"},
            {R"(INFO)", R"(<ID=AA,Number=1,Type=String,Description="Ancestral Allele",IDX=4>)"},
            {R"(INFO)", R"(<ID=DB,Number=0,Type=Flag,Description="dbSNP membership, build 129",IDX=5>)"},
            {R"(INFO)", R"(<ID=H2,Number=0,Type=Flag,Description="HapMap2 membership",IDX=6>)"},
            {R"(FILTER)", R"(<ID=q10,Description="Quality below 10",IDX=7>)"},
            {R"(FILTER)", R"(<ID=s50,Description="Less than 50% of samples have data",IDX=8>)"},
            {R"(FORMAT)", R"(<ID=GT,Number=1,Type=String,Description="Genotype",IDX=9>)"},
            {R"(FORMAT)", R"(<ID=GQ,Number=1,Type=Integer,Description="Genotype Quality",IDX=10>)"},
            {R"(FORMAT)", R"(<ID=DP,Number=1,Type=Integer,Description="Read Depth",IDX=2>)"},
            {R"(FORMAT)", R"(<ID=HQ,Number=2,Type=Integer,Description="Haplotype Quality",IDX=11>)"},
            {R"(bcftools_viewVersion)", R"(1.18+htslib-1.18)"},
            {R"(bcftools_viewCommand)", R"(view -o vcf.bcf vcf.vcf; Date=Sun Nov 12 18:58:41 2023)"},
        },
        .genotypes = {"NA00001", "NA00002", "NA00003"},
    };

    // -----------------------------------------------------------------------------------------------------------------
    // formatted input
    // -----------------------------------------------------------------------------------------------------------------
    // The corresponding human readable-form can be found at docs/snippets/data/vcf.vcf
    // This data was created by running:
    //   cd docs/snipets/data
    //   bcftools view vcf.vcf. -o vcf.bcf
    //   bin2c vcf.bcf | tail +6 | head -n -6 | sed 's/^/            /'
    auto test_data = []() -> std::string {
        auto buffer = std::vector<uint8_t> {
            0x1f,0x8b,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0xff,0x06,0x00,0x42,0x43,0x02,0x00,
            0x00,0x04,0x8d,0x94,0xcd,0x6e,0xdb,0x46,0x10,0xc7,0x19,0x52,0x92,0x2b,0x07,0x2d,
            0x4a,0x03,0x86,0x0e,0x05,0x8a,0xb5,0x85,0x00,0x4d,0x23,0xcb,0x4b,0x4a,0xa4,0x65,
            0xc7,0x74,0x42,0x49,0xd1,0x07,0x60,0xcb,0xb2,0xa5,0xba,0xbd,0x15,0x2b,0x69,0x69,
            0x11,0xe0,0x97,0xb9,0x2b,0x27,0xba,0x14,0x36,0x0a,0xe4,0xd2,0x7b,0x73,0xe9,0xbd,
            0x40,0x6f,0x7d,0x83,0x5e,0xfa,0x0a,0x7d,0x86,0x9e,0x7b,0xec,0xa9,0xc3,0x0f,0x3b,
            0x92,0x52,0xb4,0x5e,0x41,0xe4,0x62,0x77,0xe6,0x37,0xff,0x9d,0x99,0x65,0xbd,0xd1,
            0x12,0xc5,0x79,0x56,0x10,0x8a,0x45,0xcb,0x76,0xa8,0xe5,0x87,0x2e,0xe1,0xc6,0x45,
            0xa3,0x75,0x5d,0x2d,0x57,0xd6,0x8b,0xc5,0x56,0xf7,0x78,0xf8,0xea,0xdc,0x38,0xec,
            0x36,0x8d,0xbe,0x39,0x18,0x94,0x9a,0x94,0x8d,0x43,0x3b,0xe0,0xb6,0xef,0x19,0xdb,
            0xa6,0xe3,0x20,0xf0,0xe2,0x34,0x64,0x28,0x20,0x8c,0xd1,0xc9,0x76,0xa9,0xdb,0xfc,
            0xc6,0xc0,0x47,0xeb,0x09,0xae,0x49,0x38,0x35,0x54,0x8c,0xf7,0x71,0x0d,0x6b,0xb0,
            0xc6,0xfc,0x59,0x38,0xa6,0x86,0x3b,0xef,0xba,0xc1,0x8c,0x93,0x88,0xd2,0x0f,0xfd,
            0xcb,0x90,0xb8,0x17,0x95,0xb2,0x02,0x06,0x21,0xb5,0x68,0x48,0x3d,0xb0,0x89,0xdc,
            0x0f,0x76,0x77,0x77,0x19,0xbd,0xda,0xbd,0x5f,0x65,0xbb,0x0a,0xc6,0xb8,0x4d,0x3d,
            0xdf,0xa5,0xac,0x6f,0x3b,0x3e,0xdf,0xe9,0x35,0xea,0xdd,0x8a,0x5e,0xb6,0x08,0xe3,
            0x04,0x00,0x63,0xdf,0xe3,0xf6,0x65,0xac,0x57,0xc5,0x25,0x87,0x7a,0x97,0x7c,0x6a,
            0xe8,0x6a,0xb5,0xa2,0xed,0xeb,0xd5,0x52,0xa4,0xd1,0x1d,0x39,0x73,0xa3,0x5e,0xd1,
            0x4b,0xee,0x44,0x33,0x2c,0x45,0xd5,0xc7,0x13,0xab,0x46,0x74,0x8a,0xc7,0x7b,0x56,
            0x65,0x6f,0x7f,0xa2,0x2b,0x35,0xcb,0xd2,0xf5,0x11,0x1d,0xa9,0x13,0x52,0x62,0x01,
            0x1d,0xdb,0x94,0x19,0xdb,0x1d,0xdf,0xf5,0x11,0x23,0x81,0x4d,0x3d,0xb6,0x5d,0xe2,
            0xe4,0x8d,0x0f,0x22,0xe6,0xc6,0x9b,0xf7,0x07,0x0e,0xa6,0x84,0xd9,0xde,0xa5,0x11,
            0x90,0x90,0xdb,0xc4,0x81,0x95,0x6e,0xaf,0x75,0x1a,0x4b,0xe9,0x0d,0x4a,0xbd,0x99,
            0x3b,0xa2,0xa1,0xa1,0x94,0x86,0xf3,0x80,0x1a,0x5d,0x8f,0xd3,0x4b,0x1a,0x2e,0xa7,
            0x33,0x31,0x41,0xbe,0x85,0x06,0xc4,0x0d,0x1c,0xca,0xd0,0xd7,0x36,0x9f,0x22,0x48,
            0x22,0x49,0xf2,0xaa,0x1c,0x2d,0x42,0x9b,0xfd,0x87,0x40,0x87,0x3e,0x27,0x0e,0x6a,
            0xd2,0x80,0x4f,0x13,0x88,0xba,0x04,0x31,0x5b,0x77,0x10,0x33,0x81,0xb4,0x1c,0x9f,
            0xf0,0x0f,0xca,0x4c,0x1d,0x8a,0x5a,0x21,0xbd,0x9a,0x41,0x15,0xe6,0x09,0xa7,0xb2,
            0xcc,0x31,0x57,0xc4,0x0c,0x78,0x08,0xc9,0x58,0x01,0x45,0x25,0xe4,0x21,0xe8,0x49,
            0x90,0x09,0xa8,0xba,0x7c,0xaa,0xfa,0x1d,0x08,0xdf,0x09,0x22,0x2b,0x98,0xc9,0x68,
            0xd0,0xeb,0x23,0x97,0x46,0x56,0x6c,0x6a,0x07,0x25,0x34,0x9a,0xd9,0xce,0x04,0x29,
            0xea,0x7e,0x42,0xd4,0x96,0x88,0x1d,0xf5,0x7f,0x89,0x1d,0x12,0x9c,0x90,0x40,0x5d,
            0x60,0x26,0x20,0xfd,0x68,0xf9,0x0a,0x5c,0x29,0x78,0xd9,0xf1,0x6c,0x46,0x1c,0x9b,
            0xcf,0xd1,0x88,0x3a,0xfe,0x6b,0xa4,0xe0,0xc4,0x6d,0x6f,0xc5,0x8d,0x69,0x2b,0x6e,
            0xc7,0x94,0x31,0xc4,0xa7,0xc4,0x43,0x1a,0x7e,0x12,0x15,0x9c,0xa5,0x05,0x9f,0x92,
            0x6b,0x8a,0x26,0xf7,0x05,0xaf,0xc5,0xa0,0xd3,0xf3,0x13,0x73,0x18,0x83,0xda,0xc3,
            0x07,0x64,0x39,0xba,0x1e,0x1c,0x36,0x13,0xc4,0xfe,0x2a,0xe2,0xec,0x21,0x5d,0x73,
            0xc7,0x40,0xe9,0x01,0xd3,0xfe,0xc3,0x2b,0xb0,0x87,0xb5,0xe0,0x39,0x25,0x93,0x0f,
            0x3a,0x70,0x81,0xd2,0xb9,0x97,0xa4,0xfe,0x07,0x05,0x6a,0xe4,0xfc,0x9b,0xa6,0xf8,
            0x52,0x8c,0xc6,0x16,0xf7,0x7d,0x87,0x7d,0x7b,0x6d,0xd3,0xd7,0x17,0x50,0xc2,0xc8,
            0x45,0x29,0x2b,0xb5,0x67,0x53,0xce,0x1c,0x7b,0xb4,0x13,0xcd,0x57,0xed,0x1a,0xbe,
            0xeb,0x12,0x6f,0x62,0x44,0x73,0xb4,0xe3,0xa3,0xeb,0xb1,0x55,0x06,0x83,0xf8,0x0d,
            0xff,0xe7,0x28,0xfe,0x7c,0x0d,0x66,0x1e,0xea,0xf9,0xd7,0xd0,0x5d,0x48,0xa9,0x1d,
            0x68,0xb5,0x83,0xaa,0x82,0x54,0xac,0xc2,0xc7,0xb1,0xd1,0x39,0x3f,0x3d,0xc9,0xf7,
            0x4f,0x07,0xf9,0x6e,0x33,0x7f,0xfe,0xaa,0x95,0x37,0x8f,0x87,0xf9,0xb3,0xaf,0xcc,
            0xe3,0x7c,0x52,0xfb,0x7c,0xd4,0x82,0xf9,0xe4,0xa0,0xf9,0x9e,0x89,0x61,0x28,0xe9,
            0x5b,0x4d,0xdf,0x95,0x75,0xc1,0x10,0x04,0xe1,0x73,0x21,0x19,0x5b,0x35,0x41,0x78,
            0x14,0xcf,0xfe,0x34,0xb3,0x82,0x28,0x48,0x82,0x90,0x79,0x17,0x32,0x1d,0x6b,0x55,
            0x55,0xdb,0x2b,0xb4,0x0b,0xa6,0x2c,0xc8,0x8f,0x64,0x49,0x16,0xe5,0x4f,0x64,0x69,
            0x13,0xec,0x5e,0xc8,0x59,0x41,0xce,0x09,0x72,0x7e,0x4b,0x94,0x32,0x52,0x26,0x23,
            0xaf,0xcb,0x18,0x3f,0x83,0xfd,0x47,0x1f,0x65,0xe5,0xc7,0x5b,0x15,0x18,0x37,0x37,
            0xe5,0x85,0x10,0xbf,0x36,0xee,0x42,0xbc,0x7c,0x29,0xa5,0x21,0xd6,0x0a,0x43,0x20,
            0xaf,0xa5,0xe4,0xc7,0x40,0xfe,0xb1,0xf1,0xc3,0x61,0xcc,0x14,0xb3,0xa2,0x08,0x4c,
            0x45,0x7a,0x0a,0x3b,0x52,0x56,0x02,0xe6,0x81,0x6a,0x4a,0x37,0xb7,0xcd,0x05,0xe6,
            0xcf,0x7f,0x7d,0x9a,0x32,0xdf,0xd6,0xb3,0x40,0xbc,0x97,0x5d,0xc5,0x15,0x4d,0x2b,
            0x98,0x20,0x7c,0x18,0x0b,0x17,0xe1,0xb7,0x2e,0x4b,0x4f,0xfe,0xfe,0xee,0x97,0xa3,
            0xef,0x7f,0xfb,0xf2,0x85,0x9c,0x81,0x8d,0x6c,0xa4,0x3e,0xb3,0x96,0xcb,0xe6,0x72,
            0xb0,0xb9,0x29,0x16,0xc1,0x28,0x27,0x64,0x20,0x52,0xe1,0xb3,0x0d,0xf1,0xe6,0xf6,
            0xe9,0x42,0xa4,0x9f,0x7e,0xdf,0x48,0x23,0x1d,0xd6,0x25,0x98,0xa5,0xea,0xef,0xb3,
            0xf2,0x71,0x4c,0x8c,0x85,0x4b,0xb1,0x70,0x1d,0x1b,0xb0,0xbc,0x96,0x81,0x63,0x6d,
            0xd5,0x0e,0x21,0x19,0xb7,0xcf,0xc1,0x79,0x33,0xc5,0xbd,0xfd,0x63,0x23,0x42,0xc0,
            0xe8,0xd4,0xa5,0x44,0xb8,0xf4,0xce,0xb5,0xc7,0xa1,0xcf,0x08,0x57,0xf6,0xda,0xc3,
            0x46,0xa1,0xdd,0x86,0xe7,0xfb,0x00,0x79,0x08,0xd0,0x8e,0x02,0x64,0xc4,0x5c,0x9c,
            0xed,0xa2,0xfc,0x05,0x2c,0x67,0x44,0xe9,0x1f,0x99,0x5b,0xdb,0xbc,0x4a,0x07,0x00,
            0x00,0x1f,0x8b,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0xff,0x06,0x00,0x42,0x43,0x02,
            0x00,0x1b,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
        };
        auto r = std::string{};
        r.resize(buffer.size());
        memcpy(r.data(), buffer.data(), buffer.size());
        return r;
    }();

    SECTION("Creating Test file") {
        auto ofs = std::ofstream{tmp / "file.bcf", std::ios::binary};
        ofs << test_data;
    }

    SECTION("Read from std::filesystem::path") {
        auto reader = ivio::bcf::reader{{tmp / "file.bcf"}};
        REQUIRE(reader.header().table.size() == expected_header.table.size());

        for (size_t i{0}; i < reader.header().table.size(); ++i) {
            INFO("i: " << i);
            INFO(std::get<0>(reader.header().table[i]) << " " << std::get<1>(reader.header().table[i]));
            INFO(std::get<0>(expected_header.table[i]) << " " << std::get<1>(expected_header.table[i]));
            CHECK(reader.header().table[i] == expected_header.table[i]);
        }
        CHECK(reader.header().genotypes == expected_header.genotypes);
        auto vec = std::vector(begin(reader), end(reader));
        static_assert(std::same_as<decltype(vec), decltype(expected)>, "vec and expected should have the exact same type");

        REQUIRE(vec.size() == expected.size());
        for (size_t i{0}; i < vec.size(); ++i) {
            INFO("i: " << i);
            CHECK(vec[i].chromId == expected[i].chromId);
            CHECK(vec[i].pos == expected[i].pos);
            CHECK(vec[i].rlen == expected[i].rlen);
            CHECK(vec[i].qual == expected[i].qual);
            CHECK(vec[i].n_info == expected[i].n_info);
            CHECK(vec[i].n_allele == expected[i].n_allele);
            CHECK(vec[i].n_sample == expected[i].n_sample);
            CHECK(vec[i].n_fmt == expected[i].n_fmt);
            CHECK(vec[i].id == expected[i].id);
            CHECK(vec[i].ref == expected[i].ref);
            CHECK(vec[i].alt.size() == expected[i].alt.size());
            CHECK(vec[i].filter.size() == expected[i].filter.size());
            CHECK(vec[i].info.size() == expected[i].info.size());
            CHECK(vec[i].format.size() == expected[i].format.size());

            for (size_t j{0}; j < vec[i].alt.size(); ++j) {
                INFO("j: " << j);
                CHECK(vec[i].alt[j] == expected[i].alt[j]);
            }
            for (size_t j{0}; j < vec[i].filter.size(); ++j) {
                INFO("j: " << j);
                CHECK(vec[i].filter[j] == expected[i].filter[j]);
            }
            for (size_t j{0}; j < vec[i].info.size(); ++j) {
                INFO("j: " << j);
                CHECK(vec[i].info[j] == expected[i].info[j]);
            }
            for (size_t j{0}; j < vec[i].format.size(); ++j) {
                INFO("j: " << j);
                CHECK(vec[i].format[j] == expected[i].format[j]);
            }

            CHECK(vec[i] == expected[i]);
        }
    }

    SECTION("Read from std::ifstream") {
        auto ifs = std::ifstream{tmp / "file.bcf", std::ios::binary};
        auto reader = ivio::bcf::reader{{ifs}};
        CHECK(reader.header().table == expected_header.table);
        CHECK(reader.header().genotypes == expected_header.genotypes);
        auto vec = std::vector(begin(reader), end(reader));
        static_assert(std::same_as<decltype(vec), decltype(expected)>, "vec and expected should have the exact same type");
        CHECK(vec == expected);
    }

    SECTION("Read from std::stringstream") {
        auto ss = std::stringstream{test_data};
        auto reader = ivio::bcf::reader{{ss}};
        CHECK(reader.header().table == expected_header.table);
        CHECK(reader.header().genotypes == expected_header.genotypes);
        auto vec = std::vector(begin(reader), end(reader));
        static_assert(std::same_as<decltype(vec), decltype(expected)>, "vec and expected should have the exact same type");
        CHECK(vec == expected);
    }

    SECTION("cleanup - deleting temp folder") {
        std::filesystem::remove_all(tmp);
    }
}
